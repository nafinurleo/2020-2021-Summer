Task: Incremental algorithm
******
#include <cstdio>
#include<GL/gl.h>
#include <GL/glut.h>

void myDisplay(void)
{
glClear (GL_COLOR_BUFFER_BIT);
glColor3ub (128, 128, 128);
glPointSize(5.0);

double m = 50/100;
int y = 250;
double y1;

for(int i = 100; i<=200; i++){â€‹

    y1 = y+m;
    y = y1+0.5;

    glBegin(GL_POINTS);
    glVertex2i(i,y);
    glEnd();
}

glFlush ();
}


void myInit (void)
{
glClearColor(1.0, 1.0, 0.0, 0.0);
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
gluOrtho2D(0.0, 640.0, 0.0, 480.0);
}





int main(int argc, char** argv)
{
glutInit(&argc, argv);
glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
glutInitWindowSize (640, 480);
glutInitWindowPosition (100, 150);
glutCreateWindow ("This is our first project");
glutDisplayFunc(myDisplay);
myInit ();
glutMainLoop();
}
******
******
Task: Midpoint Line Algorithm
******
#include <cstdio>
#include<GL/gl.h>
#include <GL/glut.h>

void myDisplay(void)
{
glClear (GL_COLOR_BUFFER_BIT);
glColor3ub (128, 128, 128);
glPointSize(5.0);

int g =(2*100)-100;
int h = 200;
int k;
for(int i = 100; i<=200; i++){
        if(g>=0){
            glBegin(GL_POINTS);
            k = g+(2*100)-(2*100)((h+1)-h);
            glVertex2i(i+1,h+1);
            glEnd();
            }
else{
        glBegin(GL_POINTS);
        k = g+(2*100)-(2*100)((h+1)-h);
        glVertex2i(i+1,h);
        glEnd();
        }
}

glFlush ();
}


void myInit (void)
{
glClearColor(1.0, 1.0, 0.0, 0.0);
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
gluOrtho2D(0.0, 640.0, 0.0, 480.0);
}





int main(int argc, char** argv)
{
glutInit(&argc, argv);
glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
glutInitWindowSize (640, 480);
glutInitWindowPosition (100, 150);
glutCreateWindow ("This is our first project");
glutDisplayFunc(myDisplay);
myInit ();
glutMainLoop();
}
